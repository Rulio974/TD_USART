
TD_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001878  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001938  08001938  00011938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800195c  0800195c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800195c  0800195c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800195c  0800195c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800195c  0800195c  0001195c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  0800196c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800196c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004001  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001072  00000000  00000000  00024031  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  000250a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000528  00000000  00000000  00025678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d807  00000000  00000000  00025ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000040f9  00000000  00000000  000333a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000463d0  00000000  00000000  000374a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007d870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000133c  00000000  00000000  0007d8ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001920 	.word	0x08001920

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08001920 	.word	0x08001920

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	001a      	movs	r2, r3
 8000232:	231f      	movs	r3, #31
 8000234:	401a      	ands	r2, r3
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <NVIC_EnableIRQ+0x28>)
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	000a      	movs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000e100 	.word	0xe000e100

0800024c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b7f      	cmp	r3, #127	; 0x7f
 8000260:	d932      	bls.n	80002c8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000262:	4a2f      	ldr	r2, [pc, #188]	; (8000320 <NVIC_SetPriority+0xd4>)
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	0019      	movs	r1, r3
 800026a:	230f      	movs	r3, #15
 800026c:	400b      	ands	r3, r1
 800026e:	3b08      	subs	r3, #8
 8000270:	089b      	lsrs	r3, r3, #2
 8000272:	3306      	adds	r3, #6
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	18d3      	adds	r3, r2, r3
 8000278:	3304      	adds	r3, #4
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1dfa      	adds	r2, r7, #7
 800027e:	7812      	ldrb	r2, [r2, #0]
 8000280:	0011      	movs	r1, r2
 8000282:	2203      	movs	r2, #3
 8000284:	400a      	ands	r2, r1
 8000286:	00d2      	lsls	r2, r2, #3
 8000288:	21ff      	movs	r1, #255	; 0xff
 800028a:	4091      	lsls	r1, r2
 800028c:	000a      	movs	r2, r1
 800028e:	43d2      	mvns	r2, r2
 8000290:	401a      	ands	r2, r3
 8000292:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	019b      	lsls	r3, r3, #6
 8000298:	22ff      	movs	r2, #255	; 0xff
 800029a:	401a      	ands	r2, r3
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	0018      	movs	r0, r3
 80002a2:	2303      	movs	r3, #3
 80002a4:	4003      	ands	r3, r0
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	481d      	ldr	r0, [pc, #116]	; (8000320 <NVIC_SetPriority+0xd4>)
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	001c      	movs	r4, r3
 80002b2:	230f      	movs	r3, #15
 80002b4:	4023      	ands	r3, r4
 80002b6:	3b08      	subs	r3, #8
 80002b8:	089b      	lsrs	r3, r3, #2
 80002ba:	430a      	orrs	r2, r1
 80002bc:	3306      	adds	r3, #6
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	18c3      	adds	r3, r0, r3
 80002c2:	3304      	adds	r3, #4
 80002c4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002c6:	e027      	b.n	8000318 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <NVIC_SetPriority+0xd8>)
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	33c0      	adds	r3, #192	; 0xc0
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	589b      	ldr	r3, [r3, r2]
 80002d8:	1dfa      	adds	r2, r7, #7
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	0011      	movs	r1, r2
 80002de:	2203      	movs	r2, #3
 80002e0:	400a      	ands	r2, r1
 80002e2:	00d2      	lsls	r2, r2, #3
 80002e4:	21ff      	movs	r1, #255	; 0xff
 80002e6:	4091      	lsls	r1, r2
 80002e8:	000a      	movs	r2, r1
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	019b      	lsls	r3, r3, #6
 80002f4:	22ff      	movs	r2, #255	; 0xff
 80002f6:	401a      	ands	r2, r3
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	0018      	movs	r0, r3
 80002fe:	2303      	movs	r3, #3
 8000300:	4003      	ands	r3, r0
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <NVIC_SetPriority+0xd8>)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b25b      	sxtb	r3, r3
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	33c0      	adds	r3, #192	; 0xc0
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	501a      	str	r2, [r3, r0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b003      	add	sp, #12
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	e000e100 	.word	0xe000e100

08000328 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	430a      	orrs	r2, r1
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 800033e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4013      	ands	r3, r2
 8000344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	21ff      	movs	r1, #255	; 0xff
 8000364:	400b      	ands	r3, r1
 8000366:	3302      	adds	r3, #2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	589b      	ldr	r3, [r3, r2]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	0c12      	lsrs	r2, r2, #16
 8000370:	210f      	movs	r1, #15
 8000372:	4091      	lsls	r1, r2
 8000374:	000a      	movs	r2, r1
 8000376:	43d2      	mvns	r2, r2
 8000378:	401a      	ands	r2, r3
 800037a:	0011      	movs	r1, r2
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	0c1b      	lsrs	r3, r3, #16
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	409a      	lsls	r2, r3
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	24ff      	movs	r4, #255	; 0xff
 800038a:	4023      	ands	r3, r4
 800038c:	430a      	orrs	r2, r1
 800038e:	3302      	adds	r3, #2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	501a      	str	r2, [r3, r0]
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b003      	add	sp, #12
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	40010000 	.word	0x40010000

080003a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6819      	ldr	r1, [r3, #0]
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	435a      	muls	r2, r3
 80003b6:	0013      	movs	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	189b      	adds	r3, r3, r2
 80003bc:	43db      	mvns	r3, r3
 80003be:	400b      	ands	r3, r1
 80003c0:	001a      	movs	r2, r3
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	434b      	muls	r3, r1
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	434b      	muls	r3, r1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b004      	add	sp, #16
 80003d8:	bd80      	pop	{r7, pc}

080003da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b084      	sub	sp, #16
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68d9      	ldr	r1, [r3, #12]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	435a      	muls	r2, r3
 80003f0:	0013      	movs	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	189b      	adds	r3, r3, r2
 80003f6:	43db      	mvns	r3, r3
 80003f8:	400b      	ands	r3, r1
 80003fa:	001a      	movs	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	68b9      	ldr	r1, [r7, #8]
 8000400:	434b      	muls	r3, r1
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	434b      	muls	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}

08000414 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000432:	2418      	movs	r4, #24
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2308      	movs	r3, #8
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f001 fa67 	bl	8001910 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	003b      	movs	r3, r7
 8000444:	0018      	movs	r0, r3
 8000446:	2318      	movs	r3, #24
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f001 fa60 	bl	8001910 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000450:	2004      	movs	r0, #4
 8000452:	f7ff ff69 	bl	8000328 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 8000456:	2080      	movs	r0, #128	; 0x80
 8000458:	f7ff ff66 	bl	8000328 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff ff63 	bl	8000328 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000462:	23a0      	movs	r3, #160	; 0xa0
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	2120      	movs	r1, #32
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ffd3 	bl	8000414 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <MX_GPIO_Init+0xd0>)
 8000470:	0019      	movs	r1, r3
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff ff6e 	bl	8000354 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	019b      	lsls	r3, r3, #6
 800047c:	4820      	ldr	r0, [pc, #128]	; (8000500 <MX_GPIO_Init+0xd4>)
 800047e:	2200      	movs	r2, #0
 8000480:	0019      	movs	r1, r3
 8000482:	f7ff ffaa 	bl	80003da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	019b      	lsls	r3, r3, #6
 800048a:	481d      	ldr	r0, [pc, #116]	; (8000500 <MX_GPIO_Init+0xd4>)
 800048c:	2200      	movs	r2, #0
 800048e:	0019      	movs	r1, r3
 8000490:	f7ff ff86 	bl	80003a0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000494:	0021      	movs	r1, r4
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	0192      	lsls	r2, r2, #6
 800049c:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2201      	movs	r2, #1
 80004a2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2202      	movs	r2, #2
 80004ae:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fd60 	bl	8000f78 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2220      	movs	r2, #32
 80004bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004be:	003b      	movs	r3, r7
 80004c0:	2201      	movs	r2, #1
 80004c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004c4:	003b      	movs	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ca:	003b      	movs	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d6:	003a      	movs	r2, r7
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fe8d 	bl	80011fe <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80004e4:	2100      	movs	r1, #0
 80004e6:	2007      	movs	r0, #7
 80004e8:	f7ff feb0 	bl	800024c <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ec:	2007      	movs	r0, #7
 80004ee:	f7ff fe97 	bl	8000220 <NVIC_EnableIRQ>

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b009      	add	sp, #36	; 0x24
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	00040003 	.word	0x00040003
 8000500:	50000800 	.word	0x50000800

08000504 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <LL_RCC_HSI_Enable+0x18>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <LL_RCC_HSI_Enable+0x18>)
 800050e:	2101      	movs	r1, #1
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	40021000 	.word	0x40021000

08000520 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <LL_RCC_HSI_IsReady+0x1c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2204      	movs	r2, #4
 800052a:	4013      	ands	r3, r2
 800052c:	2b04      	cmp	r3, #4
 800052e:	d101      	bne.n	8000534 <LL_RCC_HSI_IsReady+0x14>
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <LL_RCC_HSI_IsReady+0x16>
 8000534:	2300      	movs	r3, #0
}
 8000536:	0018      	movs	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800054e:	4013      	ands	r3, r2
 8000550:	0019      	movs	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	021a      	lsls	r2, r3, #8
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000558:	430a      	orrs	r2, r1
 800055a:	605a      	str	r2, [r3, #4]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	ffffe0ff 	.word	0xffffe0ff

0800056c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <LL_RCC_SetSysClkSource+0x24>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	2203      	movs	r2, #3
 800057a:	4393      	bics	r3, r2
 800057c:	0019      	movs	r1, r3
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_RCC_SetSysClkSource+0x24>)
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	430a      	orrs	r2, r1
 8000584:	60da      	str	r2, [r3, #12]
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <LL_RCC_GetSysClkSource+0x14>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	220c      	movs	r2, #12
 800059e:	4013      	ands	r3, r2
}
 80005a0:	0018      	movs	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000

080005ac <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	22f0      	movs	r2, #240	; 0xf0
 80005ba:	4393      	bics	r3, r2
 80005bc:	0019      	movs	r1, r3
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	60da      	str	r2, [r3, #12]
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <LL_RCC_SetAPB1Prescaler+0x28>)
 80005e2:	4013      	ands	r3, r2
 80005e4:	0019      	movs	r1, r3
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	60da      	str	r2, [r3, #12]
}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000
 80005fc:	fffff8ff 	.word	0xfffff8ff

08000600 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <LL_RCC_SetAPB2Prescaler+0x24>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <LL_RCC_SetAPB2Prescaler+0x28>)
 800060e:	4013      	ands	r3, r2
 8000610:	0019      	movs	r1, r3
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	430a      	orrs	r2, r1
 8000618:	60da      	str	r2, [r3, #12]
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000
 8000628:	ffffc7ff 	.word	0xffffc7ff

0800062c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	0c12      	lsrs	r2, r2, #16
 800063c:	43d2      	mvns	r2, r2
 800063e:	401a      	ands	r2, r3
 8000640:	0011      	movs	r1, r2
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	0c1a      	lsrs	r2, r3, #16
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <LL_RCC_SetUSARTClockSource+0x2c>)
 800064a:	430a      	orrs	r2, r1
 800064c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <LL_APB1_GRP1_EnableClock>:
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <LL_APB1_GRP1_EnableClock+0x28>)
 8000666:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <LL_APB1_GRP1_EnableClock+0x28>)
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	430a      	orrs	r2, r1
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <LL_APB1_GRP1_EnableClock+0x28>)
 8000672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b004      	add	sp, #16
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <LL_APB2_GRP1_EnableClock>:
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000692:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	430a      	orrs	r2, r1
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <LL_APB2_GRP1_EnableClock+0x28>)
 800069e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	4013      	ands	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b004      	add	sp, #16
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <LL_FLASH_SetLatency+0x24>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2201      	movs	r2, #1
 80006c2:	4393      	bics	r3, r2
 80006c4:	0019      	movs	r1, r3
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <LL_FLASH_SetLatency+0x24>)
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40022000 	.word	0x40022000

080006dc <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <LL_FLASH_GetLatency+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4013      	ands	r3, r2
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40022000 	.word	0x40022000

080006f4 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <LL_SYSTICK_EnableIT+0x18>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <LL_SYSTICK_EnableIT+0x18>)
 80006fe:	2102      	movs	r1, #2
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	e000e010 	.word	0xe000e010

08000710 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800071e:	4013      	ands	r3, r2
 8000720:	0019      	movs	r1, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	430a      	orrs	r2, r1
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40007000 	.word	0x40007000
 8000738:	ffffe7ff 	.word	0xffffe7ff

0800073c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2220      	movs	r2, #32
 800074a:	431a      	orrs	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ff93 	bl	8000688 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	055b      	lsls	r3, r3, #21
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff ff78 	bl	800065c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f80e 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f7ff fe5c 	bl	800042c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000774:	f000 fad0 	bl	8000d18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART2);
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <main+0x30>)
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff ffde 	bl	800073c <LL_USART_EnableIT_RXNE>
  LL_SYSTICK_EnableIT();
 8000780:	f7ff ffb8 	bl	80006f4 <LL_SYSTICK_EnableIT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000784:	e7fe      	b.n	8000784 <main+0x2c>
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40004400 	.word	0x40004400

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff8f 	bl	80006b4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	f7ff ffa0 	bl	80006dc <LL_FLASH_GetLatency>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d1fb      	bne.n	8000798 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ffb3 	bl	8000710 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80007aa:	f7ff feab 	bl	8000504 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	f7ff feb6 	bl	8000520 <LL_RCC_HSI_IsReady>
 80007b4:	0003      	movs	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d1fa      	bne.n	80007b0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007ba:	2010      	movs	r0, #16
 80007bc:	f7ff fec0 	bl	8000540 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff fef3 	bl	80005ac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f7ff ff04 	bl	80005d4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff17 	bl	8000600 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff feca 	bl	800056c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	f7ff fedb 	bl	8000594 <LL_RCC_GetSysClkSource>
 80007de:	0003      	movs	r3, r0
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d1fa      	bne.n	80007da <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <SystemClock_Config+0x78>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 f850 	bl	800188c <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SystemClock_Config+0x78>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 f85c 	bl	80018ac <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80007f4:	23c0      	movs	r3, #192	; 0xc0
 80007f6:	031b      	lsls	r3, r3, #12
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff ff17 	bl	800062c <LL_RCC_SetUSARTClockSource>
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	00f42400 	.word	0x00f42400

08000808 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4013      	ands	r3, r2
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	425a      	negs	r2, r3
 800081e:	4153      	adcs	r3, r2
 8000820:	b2db      	uxtb	r3, r3
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40010400 	.word	0x40010400

08000830 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <LL_EXTI_ClearFlag_0_31+0x18>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	615a      	str	r2, [r3, #20]
}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40010400 	.word	0x40010400

0800084c <LL_USART_IsActiveFlag_RXNE>:
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	2220      	movs	r2, #32
 800085a:	4013      	ands	r3, r2
 800085c:	2b20      	cmp	r3, #32
 800085e:	d101      	bne.n	8000864 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000864:	2300      	movs	r3, #0
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}

0800086e <LL_USART_IsActiveFlag_TXE>:
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	4013      	ands	r3, r2
 800087e:	2b80      	cmp	r3, #128	; 0x80
 8000880:	d101      	bne.n	8000886 <LL_USART_IsActiveFlag_TXE+0x18>
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000886:	2300      	movs	r3, #0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}

08000890 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089c:	b2db      	uxtb	r3, r3
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	000a      	movs	r2, r1
 80008b0:	1cfb      	adds	r3, r7, #3
 80008b2:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80008b4:	1cfb      	adds	r3, r7, #3
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	4013      	ands	r3, r2
 80008da:	041a      	lsls	r2, r3, #16
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	43db      	mvns	r3, r3
 80008e0:	6839      	ldr	r1, [r7, #0]
 80008e2:	400b      	ands	r3, r1
 80008e4:	431a      	orrs	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	619a      	str	r2, [r3, #24]
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <HardFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

if(cpt == 1)
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <SysTick_Handler+0x48>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d117      	bne.n	8000954 <SysTick_Handler+0x3c>
	while(tmp < 200000)
 8000924:	e011      	b.n	800094a <SysTick_Handler+0x32>
	{
		while(LL_USART_IsActiveFlag_TXE(USART2)!=1);
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <SysTick_Handler+0x4c>)
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ff9f 	bl	800086e <LL_USART_IsActiveFlag_TXE>
 8000930:	0003      	movs	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d1f8      	bne.n	8000928 <SysTick_Handler+0x10>
		LL_USART_TransmitData8(USART2, 'A');
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SysTick_Handler+0x4c>)
 8000938:	2141      	movs	r1, #65	; 0x41
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff ffb3 	bl	80008a6 <LL_USART_TransmitData8>

		tmp++;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <SysTick_Handler+0x50>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <SysTick_Handler+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
	while(tmp < 200000)
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <SysTick_Handler+0x50>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <SysTick_Handler+0x54>)
 8000950:	4293      	cmp	r3, r2
 8000952:	dde8      	ble.n	8000926 <SysTick_Handler+0xe>
	}
cpt = 0;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <SysTick_Handler+0x48>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000024 	.word	0x20000024
 8000964:	40004400 	.word	0x40004400
 8000968:	20000028 	.word	0x20000028
 800096c:	00030d3f 	.word	0x00030d3f

08000970 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	019b      	lsls	r3, r3, #6
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff45 	bl	8000808 <LL_EXTI_IsActiveFlag_0_31>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d024      	beq.n	80009cc <EXTI4_15_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff ff52 	bl	8000830 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    	LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800098c:	23a0      	movs	r3, #160	; 0xa0
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	2120      	movs	r1, #32
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff ff96 	bl	80008c4 <LL_GPIO_TogglePin>
    	button += 1;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <EXTI4_15_IRQHandler+0x64>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <EXTI4_15_IRQHandler+0x64>)
 80009a2:	701a      	strb	r2, [r3, #0]
    	if(button > '9')
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <EXTI4_15_IRQHandler+0x64>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b39      	cmp	r3, #57	; 0x39
 80009aa:	d908      	bls.n	80009be <EXTI4_15_IRQHandler+0x4e>
    	{
    		button = '0';
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <EXTI4_15_IRQHandler+0x64>)
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	701a      	strb	r2, [r3, #0]
    		button_d += 1;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <EXTI4_15_IRQHandler+0x68>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <EXTI4_15_IRQHandler+0x68>)
 80009bc:	701a      	strb	r2, [r3, #0]
    	}

    	if(cpt == 1)
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <EXTI4_15_IRQHandler+0x6c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d102      	bne.n	80009cc <EXTI4_15_IRQHandler+0x5c>
    		tmp = 200000;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <EXTI4_15_IRQHandler+0x70>)
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <EXTI4_15_IRQHandler+0x74>)
 80009ca:	601a      	str	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000001 	.word	0x20000001
 80009dc:	20000024 	.word	0x20000024
 80009e0:	20000028 	.word	0x20000028
 80009e4:	00030d40 	.word	0x00030d40

080009e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	char car;
	while(LL_USART_IsActiveFlag_RXNE(USART2)!=1);
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff ff2a 	bl	800084c <LL_USART_IsActiveFlag_RXNE>
 80009f8:	0003      	movs	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d1f8      	bne.n	80009f0 <USART2_IRQHandler+0x8>
	car = LL_USART_ReceiveData8(USART2);
 80009fe:	1dfc      	adds	r4, r7, #7
 8000a00:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff ff44 	bl	8000890 <LL_USART_ReceiveData8>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	7023      	strb	r3, [r4, #0]
	switch(car)
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b43      	cmp	r3, #67	; 0x43
 8000a12:	d00f      	beq.n	8000a34 <USART2_IRQHandler+0x4c>
 8000a14:	2b4d      	cmp	r3, #77	; 0x4d
 8000a16:	d009      	beq.n	8000a2c <USART2_IRQHandler+0x44>
 8000a18:	2b41      	cmp	r3, #65	; 0x41
 8000a1a:	d000      	beq.n	8000a1e <USART2_IRQHandler+0x36>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1c:	e05b      	b.n	8000ad6 <USART2_IRQHandler+0xee>
			LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a1e:	23a0      	movs	r3, #160	; 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2120      	movs	r1, #32
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff ff4d 	bl	80008c4 <LL_GPIO_TogglePin>
			break;
 8000a2a:	e054      	b.n	8000ad6 <USART2_IRQHandler+0xee>
			cpt = 1;
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <USART2_IRQHandler+0xfc>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
			break;
 8000a32:	e050      	b.n	8000ad6 <USART2_IRQHandler+0xee>
			if(button_d > '0')
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <USART2_IRQHandler+0x100>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b30      	cmp	r3, #48	; 0x30
 8000a3a:	d91e      	bls.n	8000a7a <USART2_IRQHandler+0x92>
				while(LL_USART_IsActiveFlag_TXE(USART2)!=1);
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff ff14 	bl	800086e <LL_USART_IsActiveFlag_TXE>
 8000a46:	0003      	movs	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d1f8      	bne.n	8000a3e <USART2_IRQHandler+0x56>
				LL_USART_TransmitData8(USART2, button_d);
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <USART2_IRQHandler+0x100>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f7ff ff26 	bl	80008a6 <LL_USART_TransmitData8>
				while(LL_USART_IsActiveFlag_TXE(USART2)!=1);
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff ff05 	bl	800086e <LL_USART_IsActiveFlag_TXE>
 8000a64:	0003      	movs	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d1f8      	bne.n	8000a5c <USART2_IRQHandler+0x74>
				LL_USART_TransmitData8(USART2, button);
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <USART2_IRQHandler+0x104>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000a70:	0019      	movs	r1, r3
 8000a72:	0010      	movs	r0, r2
 8000a74:	f7ff ff17 	bl	80008a6 <LL_USART_TransmitData8>
 8000a78:	e012      	b.n	8000aa0 <USART2_IRQHandler+0xb8>
			else if(button_d == '0')
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <USART2_IRQHandler+0x100>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b30      	cmp	r3, #48	; 0x30
 8000a80:	d10e      	bne.n	8000aa0 <USART2_IRQHandler+0xb8>
				while(LL_USART_IsActiveFlag_TXE(USART2)!=1);
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fef1 	bl	800086e <LL_USART_IsActiveFlag_TXE>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d1f8      	bne.n	8000a84 <USART2_IRQHandler+0x9c>
				LL_USART_TransmitData8(USART2, button);
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <USART2_IRQHandler+0x104>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000a98:	0019      	movs	r1, r3
 8000a9a:	0010      	movs	r0, r2
 8000a9c:	f7ff ff03 	bl	80008a6 <LL_USART_TransmitData8>
			while(LL_USART_IsActiveFlag_TXE(USART2)!=1);
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fee2 	bl	800086e <LL_USART_IsActiveFlag_TXE>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d1f8      	bne.n	8000aa2 <USART2_IRQHandler+0xba>
			LL_USART_TransmitData8(USART2, 10);
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000ab2:	210a      	movs	r1, #10
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fef6 	bl	80008a6 <LL_USART_TransmitData8>
			while(LL_USART_IsActiveFlag_TXE(USART2)!=1);
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff fed5 	bl	800086e <LL_USART_IsActiveFlag_TXE>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1f8      	bne.n	8000abc <USART2_IRQHandler+0xd4>
			LL_USART_TransmitData8(USART2, 13);
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <USART2_IRQHandler+0xf8>)
 8000acc:	210d      	movs	r1, #13
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fee9 	bl	80008a6 <LL_USART_TransmitData8>
			break;
 8000ad4:	46c0      	nop			; (mov r8, r8)
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b003      	add	sp, #12
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	20000024 	.word	0x20000024
 8000ae8:	20000001 	.word	0x20000001
 8000aec:	20000000 	.word	0x20000000

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <SystemInit+0x64>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <SystemInit+0x64>)
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	0049      	lsls	r1, r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <SystemInit+0x64>)
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <SystemInit+0x64>)
 8000b08:	4913      	ldr	r1, [pc, #76]	; (8000b58 <SystemInit+0x68>)
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <SystemInit+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <SystemInit+0x64>)
 8000b14:	4911      	ldr	r1, [pc, #68]	; (8000b5c <SystemInit+0x6c>)
 8000b16:	400a      	ands	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <SystemInit+0x64>)
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <SystemInit+0x64>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	438a      	bics	r2, r1
 8000b24:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <SystemInit+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <SystemInit+0x64>)
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <SystemInit+0x70>)
 8000b2e:	400a      	ands	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <SystemInit+0x64>)
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <SystemInit+0x64>)
 8000b38:	490a      	ldr	r1, [pc, #40]	; (8000b64 <SystemInit+0x74>)
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SystemInit+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <SystemInit+0x78>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	0512      	lsls	r2, r2, #20
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	40021000 	.word	0x40021000
 8000b58:	88ff400c 	.word	0x88ff400c
 8000b5c:	fef6fff6 	.word	0xfef6fff6
 8000b60:	fffbffff 	.word	0xfffbffff
 8000b64:	ff02ffff 	.word	0xff02ffff
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EnableIRQ>:
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	231f      	movs	r3, #31
 8000b80:	401a      	ands	r2, r3
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <NVIC_EnableIRQ+0x28>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	4091      	lsls	r1, r2
 8000b88:	000a      	movs	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <NVIC_SetPriority>:
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bac:	d932      	bls.n	8000c14 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bae:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <NVIC_SetPriority+0xd4>)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	400b      	ands	r3, r1
 8000bba:	3b08      	subs	r3, #8
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	18d3      	adds	r3, r2, r3
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1dfa      	adds	r2, r7, #7
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	0011      	movs	r1, r2
 8000bce:	2203      	movs	r2, #3
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	00d2      	lsls	r2, r2, #3
 8000bd4:	21ff      	movs	r1, #255	; 0xff
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	000a      	movs	r2, r1
 8000bda:	43d2      	mvns	r2, r2
 8000bdc:	401a      	ands	r2, r3
 8000bde:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	019b      	lsls	r3, r3, #6
 8000be4:	22ff      	movs	r2, #255	; 0xff
 8000be6:	401a      	ands	r2, r3
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	0018      	movs	r0, r3
 8000bee:	2303      	movs	r3, #3
 8000bf0:	4003      	ands	r3, r0
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	481d      	ldr	r0, [pc, #116]	; (8000c6c <NVIC_SetPriority+0xd4>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	230f      	movs	r3, #15
 8000c00:	4023      	ands	r3, r4
 8000c02:	3b08      	subs	r3, #8
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	430a      	orrs	r2, r1
 8000c08:	3306      	adds	r3, #6
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	18c3      	adds	r3, r0, r3
 8000c0e:	3304      	adds	r3, #4
 8000c10:	601a      	str	r2, [r3, #0]
}
 8000c12:	e027      	b.n	8000c64 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c14:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <NVIC_SetPriority+0xd8>)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	33c0      	adds	r3, #192	; 0xc0
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	589b      	ldr	r3, [r3, r2]
 8000c24:	1dfa      	adds	r2, r7, #7
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	0011      	movs	r1, r2
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	00d2      	lsls	r2, r2, #3
 8000c30:	21ff      	movs	r1, #255	; 0xff
 8000c32:	4091      	lsls	r1, r2
 8000c34:	000a      	movs	r2, r1
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	401a      	ands	r2, r3
 8000c3a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	019b      	lsls	r3, r3, #6
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	401a      	ands	r2, r3
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	4003      	ands	r3, r0
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <NVIC_SetPriority+0xd8>)
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	33c0      	adds	r3, #192	; 0xc0
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	501a      	str	r2, [r3, r0]
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <LL_APB1_GRP1_EnableClock>:
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <LL_APB1_GRP1_EnableClock+0x28>)
 8000c7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <LL_APB1_GRP1_EnableClock+0x28>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <LL_APB1_GRP1_EnableClock+0x28>)
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b004      	add	sp, #16
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <LL_IOP_GRP1_EnableClock>:
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000caa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_USART_Enable>:
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <LL_USART_ConfigAsyncMode>:
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <LL_USART_ConfigAsyncMode+0x2c>)
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	222a      	movs	r2, #42	; 0x2a
 8000d02:	4393      	bics	r3, r2
 8000d04:	001a      	movs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	609a      	str	r2, [r3, #8]
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	ffffb7ff 	.word	0xffffb7ff

08000d18 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b08f      	sub	sp, #60	; 0x3c
 8000d1c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d1e:	241c      	movs	r4, #28
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	0018      	movs	r0, r3
 8000d24:	231c      	movs	r3, #28
 8000d26:	001a      	movs	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f000 fdf1 	bl	8001910 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2318      	movs	r3, #24
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f000 fdea 	bl	8001910 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	029b      	lsls	r3, r3, #10
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ff97 	bl	8000c74 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff ffaa 	bl	8000ca0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2204      	movs	r2, #4
 8000d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2202      	movs	r2, #2
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000d70:	1d3a      	adds	r2, r7, #4
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 fa40 	bl	80011fe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2208      	movs	r2, #8
 8000d82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2202      	movs	r2, #2
 8000d88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2204      	movs	r2, #4
 8000da0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000da2:	1d3a      	adds	r2, r7, #4
 8000da4:	23a0      	movs	r3, #160	; 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fa27 	bl	80011fe <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000db0:	2100      	movs	r1, #0
 8000db2:	201c      	movs	r0, #28
 8000db4:	f7ff fef0 	bl	8000b98 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000db8:	201c      	movs	r0, #28
 8000dba:	f7ff fed7 	bl	8000b6c <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	22e1      	movs	r2, #225	; 0xe1
 8000dc2:	0252      	lsls	r2, r2, #9
 8000dc4:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000dc6:	0021      	movs	r1, r4
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	220c      	movs	r2, #12
 8000dde:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <MX_USART2_UART_Init+0xf8>)
 8000df0:	0019      	movs	r1, r3
 8000df2:	0010      	movs	r0, r2
 8000df4:	f000 fccc 	bl	8001790 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <MX_USART2_UART_Init+0xf8>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff74 	bl	8000ce8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <MX_USART2_UART_Init+0xf8>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff ff62 	bl	8000ccc <LL_USART_Enable>

}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b00f      	add	sp, #60	; 0x3c
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	40004400 	.word	0x40004400

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e1a:	e003      	b.n	8000e24 <LoopCopyDataInit>

08000e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e22:	3104      	adds	r1, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e2c:	d3f6      	bcc.n	8000e1c <CopyDataInit>
  ldr  r2, =_sbss
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000e30:	e002      	b.n	8000e38 <LoopFillZerobss>

08000e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000e32:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e34:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e36:	3204      	adds	r2, #4

08000e38 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <LoopForever+0x16>)
  cmp  r2, r3
 8000e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e3c:	d3f9      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e3e:	f7ff fe57 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f000 fd41 	bl	80018c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fc87 	bl	8000758 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   r0, =_estack
 8000e4c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000e50:	08001964 	.word	0x08001964
  ldr  r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e58:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000e5c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000e60:	2000002c 	.word	0x2000002c

08000e64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_COMP_IRQHandler>
	...

08000e68 <LL_EXTI_EnableIT_0_31>:
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010400 	.word	0x40010400

08000e88 <LL_EXTI_DisableIT_0_31>:
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <LL_EXTI_DisableIT_0_31+0x20>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <LL_EXTI_DisableIT_0_31+0x20>)
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40010400 	.word	0x40010400

08000eac <LL_EXTI_EnableEvent_0_31>:
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000eb6:	6859      	ldr	r1, [r3, #4]
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	605a      	str	r2, [r3, #4]
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010400 	.word	0x40010400

08000ecc <LL_EXTI_DisableEvent_0_31>:
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <LL_EXTI_DisableEvent_0_31+0x20>)
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <LL_EXTI_DisableEvent_0_31+0x20>)
 8000ede:	400a      	ands	r2, r1
 8000ee0:	605a      	str	r2, [r3, #4]
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	40010400 	.word	0x40010400

08000ef0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000efa:	6899      	ldr	r1, [r3, #8]
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	609a      	str	r2, [r3, #8]
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010400 	.word	0x40010400

08000f10 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000f22:	400a      	ands	r2, r1
 8000f24:	609a      	str	r2, [r3, #8]
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40010400 	.word	0x40010400

08000f34 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000f3e:	68d9      	ldr	r1, [r3, #12]
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	60da      	str	r2, [r3, #12]
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40010400 	.word	0x40010400

08000f54 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000f66:	400a      	ands	r2, r1
 8000f68:	60da      	str	r2, [r3, #12]
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	40010400 	.word	0x40010400

08000f78 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000f80:	230f      	movs	r3, #15
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d065      	beq.n	800105c <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d100      	bne.n	8000f9a <LL_EXTI_Init+0x22>
 8000f98:	e06b      	b.n	8001072 <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	795b      	ldrb	r3, [r3, #5]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d00e      	beq.n	8000fc0 <LL_EXTI_Init+0x48>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d017      	beq.n	8000fd6 <LL_EXTI_Init+0x5e>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d120      	bne.n	8000fec <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff ff8c 	bl	8000ecc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff ff55 	bl	8000e68 <LL_EXTI_EnableIT_0_31>
          break;
 8000fbe:	e01a      	b.n	8000ff6 <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff5f 	bl	8000e88 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff ff6c 	bl	8000eac <LL_EXTI_EnableEvent_0_31>
          break;
 8000fd4:	e00f      	b.n	8000ff6 <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff ff44 	bl	8000e68 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ff61 	bl	8000eac <LL_EXTI_EnableEvent_0_31>
          break;
 8000fea:	e004      	b.n	8000ff6 <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
          break;
 8000ff4:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	799b      	ldrb	r3, [r3, #6]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d039      	beq.n	8001072 <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	799b      	ldrb	r3, [r3, #6]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d00e      	beq.n	8001024 <LL_EXTI_Init+0xac>
 8001006:	2b03      	cmp	r3, #3
 8001008:	d017      	beq.n	800103a <LL_EXTI_Init+0xc2>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d120      	bne.n	8001050 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff ff9e 	bl	8000f54 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff67 	bl	8000ef0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001022:	e027      	b.n	8001074 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff ff71 	bl	8000f10 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff ff7e 	bl	8000f34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001038:	e01c      	b.n	8001074 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff56 	bl	8000ef0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff73 	bl	8000f34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800104e:	e011      	b.n	8001074 <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
            break;
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	e00b      	b.n	8001074 <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ff11 	bl	8000e88 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff ff2e 	bl	8000ecc <LL_EXTI_DisableEvent_0_31>
 8001070:	e000      	b.n	8001074 <LL_EXTI_Init+0xfc>
      }
 8001072:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}

08001082 <LL_GPIO_SetPinMode>:
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6819      	ldr	r1, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	435a      	muls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	189b      	adds	r3, r3, r2
 800109e:	43db      	mvns	r3, r3
 80010a0:	400b      	ands	r3, r1
 80010a2:	001a      	movs	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	434b      	muls	r3, r1
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	434b      	muls	r3, r1
 80010ae:	431a      	orrs	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b004      	add	sp, #16
 80010ba:	bd80      	pop	{r7, pc}

080010bc <LL_GPIO_SetPinOutputType>:
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	43d2      	mvns	r2, r2
 80010d0:	401a      	ands	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	434b      	muls	r3, r1
 80010d8:	431a      	orrs	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	605a      	str	r2, [r3, #4]
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <LL_GPIO_SetPinSpeed>:
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6899      	ldr	r1, [r3, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	435a      	muls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	189b      	adds	r3, r3, r2
 8001102:	43db      	mvns	r3, r3
 8001104:	400b      	ands	r3, r1
 8001106:	001a      	movs	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	434b      	muls	r3, r1
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	434b      	muls	r3, r1
 8001112:	431a      	orrs	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	609a      	str	r2, [r3, #8]
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b004      	add	sp, #16
 800111e:	bd80      	pop	{r7, pc}

08001120 <LL_GPIO_SetPinPull>:
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	68d9      	ldr	r1, [r3, #12]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	435a      	muls	r2, r3
 8001136:	0013      	movs	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	189b      	adds	r3, r3, r2
 800113c:	43db      	mvns	r3, r3
 800113e:	400b      	ands	r3, r1
 8001140:	001a      	movs	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	434b      	muls	r3, r1
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	434b      	muls	r3, r1
 800114c:	431a      	orrs	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	60da      	str	r2, [r3, #12]
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}

0800115a <LL_GPIO_SetAFPin_0_7>:
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a19      	ldr	r1, [r3, #32]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	4353      	muls	r3, r2
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	4353      	muls	r3, r2
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	435a      	muls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	43db      	mvns	r3, r3
 8001180:	400b      	ands	r3, r1
 8001182:	001a      	movs	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	434b      	muls	r3, r1
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	434b      	muls	r3, r1
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	434b      	muls	r3, r1
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	434b      	muls	r3, r1
 8001196:	431a      	orrs	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	621a      	str	r2, [r3, #32]
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <LL_GPIO_SetAFPin_8_15>:
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	0a12      	lsrs	r2, r2, #8
 80011bc:	4353      	muls	r3, r2
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	0a12      	lsrs	r2, r2, #8
 80011c2:	4353      	muls	r3, r2
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	0a12      	lsrs	r2, r2, #8
 80011c8:	435a      	muls	r2, r3
 80011ca:	0013      	movs	r3, r2
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	43db      	mvns	r3, r3
 80011d2:	400b      	ands	r3, r1
 80011d4:	001a      	movs	r2, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	68b9      	ldr	r1, [r7, #8]
 80011dc:	0a09      	lsrs	r1, r1, #8
 80011de:	434b      	muls	r3, r1
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	0a09      	lsrs	r1, r1, #8
 80011e4:	434b      	muls	r3, r1
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	0a09      	lsrs	r1, r1, #8
 80011ea:	434b      	muls	r3, r1
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	434b      	muls	r3, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}

080011fe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001210:	e048      	b.n	80012a4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2101      	movs	r1, #1
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4091      	lsls	r1, r2
 800121c:	000a      	movs	r2, r1
 800121e:	4013      	ands	r3, r2
 8001220:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d03a      	beq.n	800129e <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d003      	beq.n	8001238 <LL_GPIO_Init+0x3a>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d10e      	bne.n	8001256 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ff50 	bl	80010e6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff33 	bl	80010bc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff ff5e 	bl	8001120 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d111      	bne.n	8001290 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2bff      	cmp	r3, #255	; 0xff
 8001270:	d807      	bhi.n	8001282 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff ff6d 	bl	800115a <LL_GPIO_SetAFPin_0_7>
 8001280:	e006      	b.n	8001290 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff ff8a 	bl	80011a4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fef2 	bl	8001082 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	40da      	lsrs	r2, r3
 80012ac:	1e13      	subs	r3, r2, #0
 80012ae:	d1b0      	bne.n	8001212 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <LL_RCC_HSI_IsReady>:
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <LL_RCC_HSI_IsReady+0x1c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2204      	movs	r2, #4
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d101      	bne.n	80012d0 <LL_RCC_HSI_IsReady+0x14>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <LL_RCC_HSI_IsReady+0x16>
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000

080012dc <LL_RCC_LSE_IsReady>:
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <LL_RCC_LSE_IsReady+0x24>)
 80012e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	401a      	ands	r2, r3
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d101      	bne.n	80012f6 <LL_RCC_LSE_IsReady+0x1a>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <LL_RCC_LSE_IsReady+0x1c>
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40021000 	.word	0x40021000

08001304 <LL_RCC_MSI_GetRange>:
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <LL_RCC_MSI_GetRange+0x14>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	23e0      	movs	r3, #224	; 0xe0
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	4013      	ands	r3, r2
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000

0800131c <LL_RCC_GetSysClkSource>:
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <LL_RCC_GetSysClkSource+0x14>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	220c      	movs	r2, #12
 8001326:	4013      	ands	r3, r2
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	40021000 	.word	0x40021000

08001334 <LL_RCC_GetAHBPrescaler>:
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <LL_RCC_GetAHBPrescaler+0x14>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	22f0      	movs	r2, #240	; 0xf0
 800133e:	4013      	ands	r3, r2
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	40021000 	.word	0x40021000

0800134c <LL_RCC_GetAPB1Prescaler>:
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	23e0      	movs	r3, #224	; 0xe0
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4013      	ands	r3, r2
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000

08001364 <LL_RCC_GetAPB2Prescaler>:
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <LL_RCC_GetAPB2Prescaler+0x14>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	23e0      	movs	r3, #224	; 0xe0
 800136e:	019b      	lsls	r3, r3, #6
 8001370:	4013      	ands	r3, r2
}
 8001372:	0018      	movs	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000

0800137c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <LL_RCC_GetUSARTClockSource+0x20>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	401a      	ands	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	4313      	orrs	r3, r2
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40021000 	.word	0x40021000

080013a0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <LL_RCC_PLL_GetMainSource+0x14>)
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	4013      	ands	r3, r2
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000

080013b8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <LL_RCC_PLL_GetMultiplicator+0x14>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	23f0      	movs	r3, #240	; 0xf0
 80013c2:	039b      	lsls	r3, r3, #14
 80013c4:	4013      	ands	r3, r2
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <LL_RCC_PLL_GetDivider+0x14>)
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	23c0      	movs	r3, #192	; 0xc0
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	4013      	ands	r3, r2
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000

080013e8 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2210      	movs	r2, #16
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d101      	bne.n	80013fc <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000

08001408 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d135      	bne.n	8001486 <LL_RCC_GetUSARTClockFreq+0x7e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff ffad 	bl	800137c <LL_RCC_GetUSARTClockSource>
 8001422:	0003      	movs	r3, r0
 8001424:	4a3c      	ldr	r2, [pc, #240]	; (8001518 <LL_RCC_GetUSARTClockFreq+0x110>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00a      	beq.n	8001440 <LL_RCC_GetUSARTClockFreq+0x38>
 800142a:	4a3c      	ldr	r2, [pc, #240]	; (800151c <LL_RCC_GetUSARTClockFreq+0x114>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d015      	beq.n	800145c <LL_RCC_GetUSARTClockFreq+0x54>
 8001430:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <LL_RCC_GetUSARTClockFreq+0x118>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d11a      	bne.n	800146c <LL_RCC_GetUSARTClockFreq+0x64>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001436:	f000 f87f 	bl	8001538 <RCC_GetSystemClockFreq>
 800143a:	0003      	movs	r3, r0
 800143c:	60fb      	str	r3, [r7, #12]
        break;
 800143e:	e027      	b.n	8001490 <LL_RCC_GetUSARTClockFreq+0x88>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001440:	f7ff ff3c 	bl	80012bc <LL_RCC_HSI_IsReady>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d020      	beq.n	800148a <LL_RCC_GetUSARTClockFreq+0x82>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001448:	f7ff ffce 	bl	80013e8 <LL_RCC_IsActiveFlag_HSIDIV>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d002      	beq.n	8001456 <LL_RCC_GetUSARTClockFreq+0x4e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001450:	4b34      	ldr	r3, [pc, #208]	; (8001524 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8001452:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001454:	e019      	b.n	800148a <LL_RCC_GetUSARTClockFreq+0x82>
            usart_frequency = HSI_VALUE;
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <LL_RCC_GetUSARTClockFreq+0x120>)
 8001458:	60fb      	str	r3, [r7, #12]
        break;
 800145a:	e016      	b.n	800148a <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800145c:	f7ff ff3e 	bl	80012dc <LL_RCC_LSE_IsReady>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d014      	beq.n	800148e <LL_RCC_GetUSARTClockFreq+0x86>
        {
          usart_frequency = LSE_VALUE;
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	60fb      	str	r3, [r7, #12]
        }
        break;
 800146a:	e010      	b.n	800148e <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800146c:	f000 f864 	bl	8001538 <RCC_GetSystemClockFreq>
 8001470:	0003      	movs	r3, r0
 8001472:	0018      	movs	r0, r3
 8001474:	f000 f8a4 	bl	80015c0 <RCC_GetHCLKClockFreq>
 8001478:	0003      	movs	r3, r0
 800147a:	0018      	movs	r0, r3
 800147c:	f000 f8ca 	bl	8001614 <RCC_GetPCLK2ClockFreq>
 8001480:	0003      	movs	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]
        break;
 8001484:	e004      	b.n	8001490 <LL_RCC_GetUSARTClockFreq+0x88>
    }
  }
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	e002      	b.n	8001490 <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	e000      	b.n	8001490 <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 800148e:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d135      	bne.n	8001502 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff ff6f 	bl	800137c <LL_RCC_GetUSARTClockSource>
 800149e:	0003      	movs	r3, r0
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <LL_RCC_GetUSARTClockFreq+0x124>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00a      	beq.n	80014bc <LL_RCC_GetUSARTClockFreq+0xb4>
 80014a6:	4a22      	ldr	r2, [pc, #136]	; (8001530 <LL_RCC_GetUSARTClockFreq+0x128>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d015      	beq.n	80014d8 <LL_RCC_GetUSARTClockFreq+0xd0>
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d11a      	bne.n	80014e8 <LL_RCC_GetUSARTClockFreq+0xe0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80014b2:	f000 f841 	bl	8001538 <RCC_GetSystemClockFreq>
 80014b6:	0003      	movs	r3, r0
 80014b8:	60fb      	str	r3, [r7, #12]
        break;
 80014ba:	e027      	b.n	800150c <LL_RCC_GetUSARTClockFreq+0x104>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80014bc:	f7ff fefe 	bl	80012bc <LL_RCC_HSI_IsReady>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d020      	beq.n	8001506 <LL_RCC_GetUSARTClockFreq+0xfe>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80014c4:	f7ff ff90 	bl	80013e8 <LL_RCC_IsActiveFlag_HSIDIV>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d002      	beq.n	80014d2 <LL_RCC_GetUSARTClockFreq+0xca>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <LL_RCC_GetUSARTClockFreq+0x11c>)
 80014ce:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80014d0:	e019      	b.n	8001506 <LL_RCC_GetUSARTClockFreq+0xfe>
            usart_frequency = HSI_VALUE;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <LL_RCC_GetUSARTClockFreq+0x120>)
 80014d4:	60fb      	str	r3, [r7, #12]
        break;
 80014d6:	e016      	b.n	8001506 <LL_RCC_GetUSARTClockFreq+0xfe>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80014d8:	f7ff ff00 	bl	80012dc <LL_RCC_LSE_IsReady>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d014      	beq.n	800150a <LL_RCC_GetUSARTClockFreq+0x102>
        {
          usart_frequency = LSE_VALUE;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80014e6:	e010      	b.n	800150a <LL_RCC_GetUSARTClockFreq+0x102>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80014e8:	f000 f826 	bl	8001538 <RCC_GetSystemClockFreq>
 80014ec:	0003      	movs	r3, r0
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 f866 	bl	80015c0 <RCC_GetHCLKClockFreq>
 80014f4:	0003      	movs	r3, r0
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 f878 	bl	80015ec <RCC_GetPCLK1ClockFreq>
 80014fc:	0003      	movs	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
        break;
 8001500:	e004      	b.n	800150c <LL_RCC_GetUSARTClockFreq+0x104>
    }
  }
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	e002      	b.n	800150c <LL_RCC_GetUSARTClockFreq+0x104>
        break;
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	e000      	b.n	800150c <LL_RCC_GetUSARTClockFreq+0x104>
        break;
 800150a:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b004      	add	sp, #16
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	00030002 	.word	0x00030002
 800151c:	00030003 	.word	0x00030003
 8001520:	00030001 	.word	0x00030001
 8001524:	003d0900 	.word	0x003d0900
 8001528:	00f42400 	.word	0x00f42400
 800152c:	000c0008 	.word	0x000c0008
 8001530:	000c000c 	.word	0x000c000c
 8001534:	000c0004 	.word	0x000c0004

08001538 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800153e:	f7ff feed 	bl	800131c <LL_RCC_GetSysClkSource>
 8001542:	0003      	movs	r3, r0
 8001544:	2b04      	cmp	r3, #4
 8001546:	d013      	beq.n	8001570 <RCC_GetSystemClockFreq+0x38>
 8001548:	d802      	bhi.n	8001550 <RCC_GetSystemClockFreq+0x18>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <RCC_GetSystemClockFreq+0x22>
 800154e:	e021      	b.n	8001594 <RCC_GetSystemClockFreq+0x5c>
 8001550:	2b08      	cmp	r3, #8
 8001552:	d017      	beq.n	8001584 <RCC_GetSystemClockFreq+0x4c>
 8001554:	2b0c      	cmp	r3, #12
 8001556:	d018      	beq.n	800158a <RCC_GetSystemClockFreq+0x52>
 8001558:	e01c      	b.n	8001594 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800155a:	f7ff fed3 	bl	8001304 <LL_RCC_MSI_GetRange>
 800155e:	0003      	movs	r3, r0
 8001560:	0b5b      	lsrs	r3, r3, #13
 8001562:	3301      	adds	r3, #1
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	0212      	lsls	r2, r2, #8
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	607b      	str	r3, [r7, #4]
      break;
 800156e:	e01c      	b.n	80015aa <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001570:	f7ff ff3a 	bl	80013e8 <LL_RCC_IsActiveFlag_HSIDIV>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d002      	beq.n	800157e <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <RCC_GetSystemClockFreq+0x7c>)
 800157a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 800157c:	e015      	b.n	80015aa <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <RCC_GetSystemClockFreq+0x80>)
 8001580:	607b      	str	r3, [r7, #4]
      break;
 8001582:	e012      	b.n	80015aa <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <RCC_GetSystemClockFreq+0x84>)
 8001586:	607b      	str	r3, [r7, #4]
      break;
 8001588:	e00f      	b.n	80015aa <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800158a:	f000 f857 	bl	800163c <RCC_PLL_GetFreqDomain_SYS>
 800158e:	0003      	movs	r3, r0
 8001590:	607b      	str	r3, [r7, #4]
      break;
 8001592:	e00a      	b.n	80015aa <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001594:	f7ff feb6 	bl	8001304 <LL_RCC_MSI_GetRange>
 8001598:	0003      	movs	r3, r0
 800159a:	0b5b      	lsrs	r3, r3, #13
 800159c:	3301      	adds	r3, #1
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	0212      	lsls	r2, r2, #8
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	607b      	str	r3, [r7, #4]
      break;
 80015a8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80015aa:	687b      	ldr	r3, [r7, #4]
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	003d0900 	.word	0x003d0900
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	007a1200 	.word	0x007a1200

080015c0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80015c8:	f7ff feb4 	bl	8001334 <LL_RCC_GetAHBPrescaler>
 80015cc:	0003      	movs	r3, r0
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	220f      	movs	r2, #15
 80015d2:	4013      	ands	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <RCC_GetHCLKClockFreq+0x28>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	001a      	movs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	40d3      	lsrs	r3, r2
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	08001938 	.word	0x08001938

080015ec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80015f4:	f7ff feaa 	bl	800134c <LL_RCC_GetAPB1Prescaler>
 80015f8:	0003      	movs	r3, r0
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <RCC_GetPCLK1ClockFreq+0x24>)
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	001a      	movs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	40d3      	lsrs	r3, r2
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	08001948 	.word	0x08001948

08001614 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800161c:	f7ff fea2 	bl	8001364 <LL_RCC_GetAPB2Prescaler>
 8001620:	0003      	movs	r3, r0
 8001622:	0adb      	lsrs	r3, r3, #11
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <RCC_GetPCLK2ClockFreq+0x24>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	001a      	movs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	40d3      	lsrs	r3, r2
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	08001948 	.word	0x08001948

0800163c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001642:	f7ff fead 	bl	80013a0 <LL_RCC_PLL_GetMainSource>
 8001646:	0003      	movs	r3, r0
 8001648:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001650:	f7ff feca 	bl	80013e8 <LL_RCC_IsActiveFlag_HSIDIV>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d002      	beq.n	800165e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800165a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 800165c:	e005      	b.n	800166a <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001660:	607b      	str	r3, [r7, #4]
      break;
 8001662:	e002      	b.n	800166a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001666:	607b      	str	r3, [r7, #4]
      break;
 8001668:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800166a:	f7ff fea5 	bl	80013b8 <LL_RCC_PLL_GetMultiplicator>
 800166e:	0003      	movs	r3, r0
 8001670:	0c9b      	lsrs	r3, r3, #18
 8001672:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	001a      	movs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4353      	muls	r3, r2
 800167c:	001c      	movs	r4, r3
 800167e:	f7ff fea7 	bl	80013d0 <LL_RCC_PLL_GetDivider>
 8001682:	0003      	movs	r3, r0
 8001684:	0d9b      	lsrs	r3, r3, #22
 8001686:	3301      	adds	r3, #1
 8001688:	0019      	movs	r1, r3
 800168a:	0020      	movs	r0, r4
 800168c:	f7fe fd3c 	bl	8000108 <__udivsi3>
 8001690:	0003      	movs	r3, r0
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b003      	add	sp, #12
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	003d0900 	.word	0x003d0900
 80016a0:	00f42400 	.word	0x00f42400
 80016a4:	007a1200 	.word	0x007a1200
 80016a8:	08001950 	.word	0x08001950

080016ac <LL_USART_IsEnabled>:
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <LL_USART_IsEnabled+0x18>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <LL_USART_IsEnabled+0x1a>
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <LL_USART_SetStopBitsLength>:
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <LL_USART_SetStopBitsLength+0x24>)
 80016e0:	401a      	ands	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	ffffcfff 	.word	0xffffcfff

080016f8 <LL_USART_SetHWFlowCtrl>:
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <LL_USART_SetHWFlowCtrl+0x24>)
 8001708:	401a      	ands	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	fffffcff 	.word	0xfffffcff

08001720 <LL_USART_SetBaudRate>:
{
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	429a      	cmp	r2, r3
 8001736:	d117      	bne.n	8001768 <LL_USART_SetBaudRate+0x48>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	005a      	lsls	r2, r3, #1
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	18d3      	adds	r3, r2, r3
 8001742:	6839      	ldr	r1, [r7, #0]
 8001744:	0018      	movs	r0, r3
 8001746:	f7fe fcdf 	bl	8000108 <__udivsi3>
 800174a:	0003      	movs	r3, r0
 800174c:	b29b      	uxth	r3, r3
 800174e:	001d      	movs	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <LL_USART_SetBaudRate+0x6c>)
 8001752:	402b      	ands	r3, r5
 8001754:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001756:	086b      	lsrs	r3, r5, #1
 8001758:	b29b      	uxth	r3, r3
 800175a:	001a      	movs	r2, r3
 800175c:	2307      	movs	r3, #7
 800175e:	4013      	ands	r3, r2
 8001760:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	60dc      	str	r4, [r3, #12]
}
 8001766:	e00c      	b.n	8001782 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	085a      	lsrs	r2, r3, #1
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	18d3      	adds	r3, r2, r3
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe fcc8 	bl	8000108 <__udivsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	b29b      	uxth	r3, r3
 800177c:	001a      	movs	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	60da      	str	r2, [r3, #12]
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b004      	add	sp, #16
 8001788:	bdb0      	pop	{r4, r5, r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	0000fff0 	.word	0x0000fff0

08001790 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800179a:	230f      	movs	r3, #15
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff ff7f 	bl	80016ac <LL_USART_IsEnabled>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d145      	bne.n	800183e <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <LL_USART_Init+0xbc>)
 80017b8:	401a      	ands	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	4319      	orrs	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	4319      	orrs	r1, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	430b      	orrs	r3, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0011      	movs	r1, r2
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff ff76 	bl	80016d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0011      	movs	r1, r2
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff ff83 	bl	80016f8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a16      	ldr	r2, [pc, #88]	; (8001850 <LL_USART_Init+0xc0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d105      	bne.n	8001806 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f7ff fe04 	bl	8001408 <LL_RCC_GetUSARTClockFreq>
 8001800:	0003      	movs	r3, r0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	e008      	b.n	8001818 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <LL_USART_Init+0xc4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d104      	bne.n	8001818 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800180e:	200c      	movs	r0, #12
 8001810:	f7ff fdfa 	bl	8001408 <LL_RCC_GetUSARTClockFreq>
 8001814:	0003      	movs	r3, r0
 8001816:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00f      	beq.n	800183e <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8001826:	230f      	movs	r3, #15
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff71 	bl	8001720 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800183e:	230f      	movs	r3, #15
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b004      	add	sp, #16
 800184a:	bd80      	pop	{r7, pc}
 800184c:	efff69f3 	.word	0xefff69f3
 8001850:	40013800 	.word	0x40013800
 8001854:	40004400 	.word	0x40004400

08001858 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7fe fc4f 	bl	8000108 <__udivsi3>
 800186a:	0003      	movs	r3, r0
 800186c:	001a      	movs	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <LL_InitTick+0x30>)
 8001870:	3a01      	subs	r2, #1
 8001872:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <LL_InitTick+0x30>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b03      	ldr	r3, [pc, #12]	; (8001888 <LL_InitTick+0x30>)
 800187c:	2205      	movs	r2, #5
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}
 8001888:	e000e010 	.word	0xe000e010

0800188c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001894:	23fa      	movs	r3, #250	; 0xfa
 8001896:	009a      	lsls	r2, r3, #2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f7ff ffdb 	bl	8001858 <LL_InitTick>
}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b002      	add	sp, #8
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <LL_SetSystemCoreClock+0x18>)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	20000004 	.word	0x20000004

080018c8 <__libc_init_array>:
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	2600      	movs	r6, #0
 80018cc:	4d0c      	ldr	r5, [pc, #48]	; (8001900 <__libc_init_array+0x38>)
 80018ce:	4c0d      	ldr	r4, [pc, #52]	; (8001904 <__libc_init_array+0x3c>)
 80018d0:	1b64      	subs	r4, r4, r5
 80018d2:	10a4      	asrs	r4, r4, #2
 80018d4:	42a6      	cmp	r6, r4
 80018d6:	d109      	bne.n	80018ec <__libc_init_array+0x24>
 80018d8:	2600      	movs	r6, #0
 80018da:	f000 f821 	bl	8001920 <_init>
 80018de:	4d0a      	ldr	r5, [pc, #40]	; (8001908 <__libc_init_array+0x40>)
 80018e0:	4c0a      	ldr	r4, [pc, #40]	; (800190c <__libc_init_array+0x44>)
 80018e2:	1b64      	subs	r4, r4, r5
 80018e4:	10a4      	asrs	r4, r4, #2
 80018e6:	42a6      	cmp	r6, r4
 80018e8:	d105      	bne.n	80018f6 <__libc_init_array+0x2e>
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	00b3      	lsls	r3, r6, #2
 80018ee:	58eb      	ldr	r3, [r5, r3]
 80018f0:	4798      	blx	r3
 80018f2:	3601      	adds	r6, #1
 80018f4:	e7ee      	b.n	80018d4 <__libc_init_array+0xc>
 80018f6:	00b3      	lsls	r3, r6, #2
 80018f8:	58eb      	ldr	r3, [r5, r3]
 80018fa:	4798      	blx	r3
 80018fc:	3601      	adds	r6, #1
 80018fe:	e7f2      	b.n	80018e6 <__libc_init_array+0x1e>
 8001900:	0800195c 	.word	0x0800195c
 8001904:	0800195c 	.word	0x0800195c
 8001908:	0800195c 	.word	0x0800195c
 800190c:	08001960 	.word	0x08001960

08001910 <memset>:
 8001910:	0003      	movs	r3, r0
 8001912:	1812      	adds	r2, r2, r0
 8001914:	4293      	cmp	r3, r2
 8001916:	d100      	bne.n	800191a <memset+0xa>
 8001918:	4770      	bx	lr
 800191a:	7019      	strb	r1, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	e7f9      	b.n	8001914 <memset+0x4>

08001920 <_init>:
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001926:	bc08      	pop	{r3}
 8001928:	469e      	mov	lr, r3
 800192a:	4770      	bx	lr

0800192c <_fini>:
 800192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001932:	bc08      	pop	{r3}
 8001934:	469e      	mov	lr, r3
 8001936:	4770      	bx	lr
